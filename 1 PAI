TIC TAC TOE:

def print_board(board): for row in board:

print(" | ".join(row))

print("-" * 5)
def check_win(board, player):

for row in board:
if all(cell == player for cell in row):

return True for col in range(3):

if all(board[row][col] == player for row in range(3)): return True

if all(board[i][i] == player for i in range(3)): return True

if all(board[i][2 - i] == player for i in range(3)): return True

return False def tic_tac_toe():

board = [[" " for _ in range(3)] for _ in range(3)] player = "X"
while True:

print_board(board)
row = int(input(f"Player {player}, choose row (0-2): ")) col = int(input(f"Player {player}, choose column (0-2): ")) if board[row][col] == " ":

board[row][col] = player
if check_win(board, player):

print_board(board) print(f"Player {player} wins!") break

if all(cell != " " for row in board for cell in row): print_board(board)
print("It's a draw!")
break

player = "O" if player == "X" else "X" else:

print("That position is already taken!") if __name__ == "__main__":

tic_tac_toe()

 

--------------------------------------------------------------------------------------------------------------

NIM GAME:

import random
def get_user_move(heap):

while True: try:

sticks_to_remove =
int(input(f"Enter sticks to remove (1 to {min(heap, heap // 2)}): "))

if 1 <= sticks_to_remove <= min(heap, heap // 2): return sticks_to_remove

else:
print(f"Invalid input (1 to {min(heap, heap // 2)}).")

except ValueError:
print("Invalid input. Enter a valid number.")

def get_computer_move(heap): xor_sum = heap
for i in range(heap):

xor_sum ^= i
max_sticks = min(heap, heap // 2)

if xor_sum == 0 else min(heap // 2, heap) return random.randint(1, max_sticks)

def nim_game(): heap = 16 player_turn = 1 while heap > 1:

print(f"Current heap: {'|' * heap}")
player_name = "Player 1"
if player_turn == 1 else "Computer"
sticks_to_remove = get_user_move(heap)
if player_turn == 1 else get_computer_move(heap)
heap -= sticks_to_remove
print(f"{player_name} removes {sticks_to_remove} sticks.") player_turn = 3 - player_turn

winner = "Player 1" if player_turn == 2 else "Computer"

print(f"\n{winner} is the winner!") if _name_ == "_main_":

nim_game()

--------------------------------------------------------------------------------------------------------------

ASTAR:

def aStarAlgo(start, stop):
open_set, closed_set, g, parents = {start}, set(), {start: 0}, {start: start} while open_set:

n = min(open_set, key=lambda x: g[x] + heuristic(x)) if n == stop or not Graph_nodes.get(n):

pass else:

for m, weight in get_neighbors(n) or []:
if m not in open_set and m not in closed_set:

open_set.add(m) parents[m] = n
g[m] = g[n] + weight

elif g[m] > g[n] + weight:
g[m], parents[m] = g[n] + weight, n if m in closed_set:

closed_set.remove(m)

open_set.add(m) if not n:

print('Path does not exist!')

return None if n == stop:

path = []
while parents[n] != n:

path.append(n)

n = parents[n] path.append(start) path.reverse() print('Path found:', path) return path

open_set.remove(n)

closed_set.add(n) print('Path does not exist!') return None

def get_neighbors(v):
return Graph_nodes.get(v, [])

def heuristic(n):
H_dist = {'A': 11, 'B': 6, 'C': 99, 'D': 1, 'E': 7, 'G': 0} return H_dist.get(n, 0)

Graph_nodes = {'A': [('B', 2), ('E', 3)], 'B': [('C', 1), ('G', 9)], 'C': None, 'E': [('D', 6)], 'D': [('G', 1)]}
aStarAlgo('A', 'G')

--------------------------------------------------------------------------------------------------------------

ALPHA BETA PRUNING:

MAX, MIN = 1000, -1000
def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):

if depth == 3:
return values[nodeIndex]

best = MIN if maximizingPlayer else MAX for i in range(2):

val = minimax(depth + 1, nodeIndex * 2 + i, not maximizingPlayer, values, alpha, beta)

best = max(best, val) if maximizingPlayer else min(best, val) alpha = max(alpha, best) if maximizingPlayer else alpha beta = min(beta, best) if not maximizingPlayer else beta
if beta <= alpha:

break return best

if _name_ == "_main_":
values = [10, 9, 14, 18, 5, 4, 50, 3] print("The optimal value is:", minimax

--------------------------------------------------------------------------------------------------------------

FUZZY SET:

def fuzzy_union(set1, set2): union_set = {}
for element in set1:

union_set[element] = max(set1[element], set2.get(element, 0)) for element in set2:

if element not in union_set: union_set[element] = set2[element]

return union_set
def fuzzy_intersection(set1, set2):

intersection_set = {} for element in set1:

if element in set2:
intersection_set[element] = min(set1[element], set2[element])

return intersection_set
def display_fuzzy_set(fuzzy_set):

print("{", end="")
for element, membership in fuzzy_set.items():

print(f"{element}: {membership}", end=", ") print("}")

set1 = {'a': 0.8, 'b': 0.6, 'c': 0.4, 'd': 0.2, 'e': 0.1} set2 = {'a': 0.7, 'b': 0.5, 'c': 0.3, 'f': 0.9, 'g': 0.4} print("Fuzzy set 1:")
display_fuzzy_set(set1)

print("\nFuzzy set 2:")
display_fuzzy_set(set2)
print("\nUnion of the fuzzy sets:")
union_set = fuzzy_union(set1, set2) display_fuzzy_set(union_set) print("\nIntersection of the fuzzy sets:") intersection_set = fuzzy_intersection(set1, set2) display_fuzzy_set(intersection_set)
